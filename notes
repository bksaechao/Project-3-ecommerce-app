Final Project Requirements
* Must use React, Vue, or Angular in some way (even if minimal)
* Must use a Node and Express Web Server
* Must be backed by a MySQL or MongoDB Database with a Sequelize or Mongoose ORM  
* Must have both GET and POST routes for retrieving and adding new data
* Must be deployed using Heroku (with Data)
* Must utilize at least two libraries, packages, or technologies that we haven't discussed
* Must have a polished frontend / UI
* Must have folder structure that meets MVC Paradigm
* Must meet good quality coding standards (indentation, scoping, naming)
* Must not expose sensitive API key information on the server, see [Protecting-API-Keys-In-Node.md](../../../../01-Class-Content/10-nodejs/03-Supplemental/Protecting-API-Keys-In-Node.md)


module.exports = function (app) {
    app.get('/api/user', function (req, res) {
        res.json(req.user);
    });

    app.get('/api/user/logout', function (req, res) {
        localStorage.clear();

        res.json("Logged out user.");
    });

    app.post('/api/user/signup', async function (req, res) {
        const email = req.body.email.toLowerCase();

        const password = await bcrypt.hash(req.body.password, 10);

        const user = await db.User.create({
            email: email,
            password: password
        });

        const token = jwt.sign({ _id: user._id }, process.env.APP_SECRET);

        res.json(token);
    });

    app.post('/api/user/login', async function (req, res) {
        const user = await db.User.findOne({
            where: {
                email: req.body.email
            }
        });

        if (!user) {
            res.json("No user found with that email.")
        }

        const isPasswordCorrect = await bcrypt.compare(req.body.password, user.password);

        if (!isPasswordCorrect) {
            res.json("Invalid password.");
        }

        const token = jwt.sign({ _id: user._id }, process.env.APP_SECRET);

        delete user.dataValues.password;

        res.json(token);
    });
};